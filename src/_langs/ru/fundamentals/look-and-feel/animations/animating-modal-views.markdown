---
layout: article
title: "Создание анимации модальных представлений"
description: "Узнайте, как добиться анимационного эффекта для модальных представлений в приложениях"
introduction: "Модальные представления предназначены для вывода столь важных сообщений, что для их отображения есть все основания заблокировать пользовательский интерфейс. При выборе таких представлений следует соблюдать осторожность, поскольку они прерывают работу приложений и в случае чрезмерного их применения могут испортить пользователям все впечатление от программы. Однако в определенных обстоятельствах именно такие представления и следует использовать. Добавление же к ним анимационных эффектов сделает их более привлекательными"
article:
  written_on: 2014-08-08
  updated_on: 2014-10-21
  order: 6
collection: animations
id: animating-modal-views
priority: 0
key-takeaways:
  code:
    - Модальные представления не следует использовать слишком часто; пользователям очень не понравится, если их работу прерывать без надобности.
    - Добавление масштабирования к анимации позволяет получить зрелищный эффект "выпадения".
    - Когда пользователь закрывает модальное представление, оно должно исчезать с экрана быстро. А вот выводить его на экран следует немного медленнее, чтобы это было не так неожиданно для пользователя.
notes:
  pointerevents:
    - Старые версии Internet Explorer не поддерживают свойство <code>pointer-event</code>, поэтому для них свойство display необходимо переключать вручную. Недостаток заключается в том, что для 'закрепления' изменения требуется кадр, поэтому, чтобы начать анимацию, необходимо использовать обратный вызов requestAnimationFrame. Если не подождать кадра, модальное наложение просто появится.

authors:
  - paullewis
---
{% wrap content %}

{% include modules/takeaway.liquid list=page.key-takeaways.code %}

<img src="imgs/gifs/dont-press.gif" alt="Создание анимации модального представления." />

{% link_sample _code/modal-view-animation.html %}См. образец.{% endlink_sample %}

Модальное наложение должно быть выровнено по viewport, поэтому его свойству `position` следует задать значение `fixed`:

{% highlight css %}
.modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;

  pointer-events: none;
  opacity: 0;

  will-change: transform, opacity;
}
{% endhighlight %}

Начальное значение его свойства `opacity` равно 0, поэтому это представление не отображается, но кроме того, свойству `pointer-events` также необходимо задать значение `none`, с тем, чтобы представление не реагировало на нажатия. В противном случае будет заблокировано все взаимодействие и вся страница перестанет реагировать на действия пользователя. И наконец, поскольку эффекты анимации будут добавлены к свойствам `opacity` и `transform`, эти свойства необходимо обозначить как изменяющиеся с помощью атрибута `will-change` (см. также [Использование свойства will-change]({{site.fundamentals}}/look-and-feel/animations/animations-and-performance.html#using-the-will-change-property)).

Когда представление отображается на экране, оно должно реагировать на действия пользователя, а его свойство `opacity` должно иметь значение 1:

{% highlight css %}
.modal.visible {
  pointer-events: auto;
  opacity: 1;
}
{% endhighlight %}

Теперь каждый раз, когда необходимо отобразить модальное представление, можно переключать класс "visible" с помощью JavaScript:

{% highlight javascript %}
modal.classList.add('visible');
{% endhighlight %}

В этот момент модальное представление откроется вообще без анимации, которую теперь можно добавить
(см. также [Изменение скорости при нестандартной анимации]({{site.fundamentals}}/look-and-feel/animations/custom-easing.html)):

{% highlight css %}
.modal {
  -webkit-transform: scale(1.15);
  transform: scale(1.15);

  -webkit-transition:
    -webkit-transform 0.1s cubic-bezier(0.465, 0.183, 0.153, 0.946),
    opacity 0.1s cubic-bezier(0.465, 0.183, 0.153, 0.946);

  transition:
    transform 0.1s cubic-bezier(0.465, 0.183, 0.153, 0.946),
    opacity 0.1s cubic-bezier(0.465, 0.183, 0.153, 0.946);

}
{% endhighlight %}

При добавлении свойства `scale` к свойству transform представление будет как бы падать на экран ― довольно зрелищный эффект. Стандартный переход применяется и к свойству transform, и к свойству opacity с нестандартной кривой и продолжительностью в 0,1 секунды.

Продолжительность весьма невелика, но она идеально подходит для ситуации, когда пользователь закрывает представление и возвращается в приложение. Недостатком является то, что появление модального представления на экране, возможно, выглядит слишком агрессивно. Чтобы исправить этот недостаток, необходимо переопределить значения перехода для класса `visible`:

{% highlight css %}
.modal.visible {

  -webkit-transform: scale(1);
  transform: scale(1);

  -webkit-transition:
    -webkit-transform 0.3s cubic-bezier(0.465, 0.183, 0.153, 0.946),
    opacity 0.3s cubic-bezier(0.465, 0.183, 0.153, 0.946);

  transition:
    transform 0.3s cubic-bezier(0.465, 0.183, 0.153, 0.946),
    opacity 0.3s cubic-bezier(0.465, 0.183, 0.153, 0.946);

}
{% endhighlight %}

Теперь модальное представление появляется на экране в течение 0,3 секунды, что выглядит не так агрессивно, а исчезает с экрана быстро, и это понравится пользователям.

{% include modules/nextarticle.liquid %}

{% endwrap %}

